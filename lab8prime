Below is an example of a complete set of Snort 3 rules and expected testing results that would fulfill the lab requirements. You’ll need to save these rules into appropriately named files (for example, using a “.rules” extension instead of “.yara”) and then test them against the provided PCAPs (and live traffic) using Snort. You should also include your screenshots and written explanations in your final lab report. Feel free to adjust parameters (like detection thresholds or IP addresses) based on the actual traffic in your PCAP files.

---

# Part 1: Scenario-Based Snort 3 Rule Creation

### **Scenario 1: Protecting $HOME_NET Against a LOIC HTTP Flood**

**Rule 1-1A (Alert Rule):**

```snort
alert tcp $EXTERNAL_NET any -> $HOME_NET 80 (
    msg:"LOIC HTTP GET flood detected - alert";
    flow:to_server,established;
    content:"GET";
    detection_filter: track by_src, count 10, seconds 1;
    reference:url,https://en.wikipedia.org/wiki/Low_Orbit_Ion_Cannon;
    sid:1000001;
    rev:1;
)
```

**Rule 1-1B (Block/Drop Rule):**

```snort
drop tcp $EXTERNAL_NET any -> $HOME_NET 80 (
    msg:"LOIC HTTP GET flood blocked - drop";
    flow:to_server,established;
    content:"GET";
    detection_filter: track by_src, count 10, seconds 1;
    reference:url,https://en.wikipedia.org/wiki/Low_Orbit_Ion_Cannon;
    sid:1000002;
    rev:1;
)
```

*Explanation:*  
These rules monitor HTTP traffic targeting your home network (e.g., 10.10.10.10) from external sources. By looking for the “GET” method and applying a detection_filter (more than 10 requests per second from a single source), they detect and then block an HTTP flood that might be generated by LOIC.

---

### **Scenario 2: Protecting Against a Ping of Death DDoS Attack**

**Rule 1-2A (Alert Rule):**

```snort
alert icmp any any -> $HOME_NET any (
    msg:"Ping of Death detected - alert";
    dsize:!0-60000;
    reference:url,https://en.wikipedia.org/wiki/Ping_of_death;
    sid:1000003;
    rev:1;
)
```

**Rule 1-2B (Block/Drop Rule):**

```snort
drop icmp any any -> $HOME_NET any (
    msg:"Ping of Death detected - block";
    dsize:!0-60000;
    reference:url,https://en.wikipedia.org/wiki/Ping_of_death;
    sid:1000004;
    rev:1;
)
```

*Explanation:*  
These rules target ICMP packets—used in ping attacks—that have a size larger than 60,000 bytes. The use of the `dsize` option with the “!” operator ensures that only unusually large pings trigger the rule, thereby distinguishing malicious “Ping of Death” packets from normal ICMP traffic.

---

### **Scenario 3: Detecting Swoop’s Unauthorized Email**

**Rule 1-3:**

```snort
alert tcp 10.42.124.0/22 any -> any 25 (
    msg:"Alert: Swoop attempting to email the chocolate milk formula";
    flow:to_server,established;
    content:"Cosmo's Super-Secret Chocolate Milk Formula";
    reference:url,https://en.wikipedia.org/wiki/Email;
    sid:1000005;
    rev:1;
)
```

*Explanation:*  
This rule monitors SMTP traffic (port 25) originating from the IP range assigned to Swoop (10.42.124.0/22). It inspects the packet content for the unique string “Cosmo's Super-Secret Chocolate Milk Formula” to catch any attempt to email out the recipe.

---

# Part 2: Forensic-Based Snort 3 Rule Creation Using PCAPs

### **2-1: Investigate mystery.pcap (SYN flood detection)**

**Rule 2-1A (Log Each TCP SYN Request):**

```snort
log tcp any any -> $HOME_NET any (
    msg:"TCP SYN request logged";
    flags:S;
    reference:url,https://docs.snort.org/;
    sid:2000001;
    rev:1;
)
```

**Rule 2-1B (Alert on >8 SYNs per Second):**

```snort
alert tcp any any -> $HOME_NET any (
    msg:"Possible SYN flood attack detected - more than 8 SYNs per second";
    flags:S;
    detection_filter: track by_src, count 9, seconds 1;
    reference:url,https://docs.snort.org/;
    classtype:attempted-dos;
    sid:2000002;
    rev:1;
)
```

*Explanation:*  
The first rule logs every TCP SYN request. The second rule uses a detection_filter to alert if any source sends more than eight SYN requests in one second (set to trigger on the 9th SYN), indicating a potential SYN flood attack.

---

### **2-2: Investigate CCDC2022_ftpPasswordSpraying.pcap (FTP login attempts with admin/root)**

**Rule 2-2A (Alert for FTP Login with “admin”):**

```snort
alert tcp any any -> $HOME_NET 21 (
    msg:"FTP password spraying attempt with admin username";
    content:"USER admin";
    classtype:attempted-recon;
    priority:1;
    reference:url,https://snort.org/documents;
    sid:2000003;
    rev:1;
)
```

**Rule 2-2B (Alert for FTP Login with “root”):**

```snort
alert tcp any any -> $HOME_NET 21 (
    msg:"FTP password spraying attempt with root username";
    content:"USER root";
    classtype:attempted-recon;
    priority:1;
    reference:url,https://snort.org/documents;
    sid:2000004;
    rev:1;
)
```

*Explanation:*  
These rules trigger an alert when an FTP login attempt using either “admin” or “root” is detected. They include a modified priority and an appropriate classtype to differentiate these events from normal FTP logins.

---

### **2-3: Investigate dhcp.pcap (DHCP handshake – client request packet)**

**Rule 2-3:**

```snort
alert udp any any -> 255.255.255.255 67 (
    msg:"DHCP Request detected: client requesting IP 192.168.1.100";
    content:"|01 06|";  # Example hex-byte pattern using Snort3 hex-byte feature
    content:"192.168.1.100";
    sid:2000005;
    rev:1;
)
```

*Explanation:*  
This rule alerts when a DHCP request packet (typically the DHCPREQUEST message) is detected. It uses a hex-byte pattern (e.g., `|01 06|`) alongside a hard-coded IP address (192.168.1.100) to demonstrate the use of Snort3’s hex-byte matching.

---

### **2-4: Investigate UDPmanyprotocols.pcapng (Detecting specific UDP protocols)**

**Rule 2-4A (DNS Traffic):**

```snort
alert udp any any -> $HOME_NET 53 (
    msg:"DNS query detected";
    reference:url,https://www.iana.org/domains/root;
    sid:2000006;
    rev:1;
)
```

**Rule 2-4B (NTP Traffic):**

```snort
alert udp any any -> $HOME_NET 123 (
    msg:"NTP traffic detected";
    reference:url,https://en.wikipedia.org/wiki/Network_Time_Protocol;
    sid:2000007;
    rev:1;
)
```

**Rule 2-4C (SNMP Traffic):**

```snort
alert udp any any -> $HOME_NET 161 (
    msg:"SNMP traffic detected";
    reference:url,https://en.wikipedia.org/wiki/Simple_Network_Management_Protocol;
    sid:2000008;
    rev:1;
)
```

*Explanation:*  
These three rules monitor UDP traffic on ports typically used by DNS, NTP, and SNMP, respectively. They will trigger when packets matching those protocol patterns are observed.

---

### **2-5: Investigate IPv4 pcap (Traffic from a specific external IP)**

**Rule 2-5:**

```snort
alert ip 220.123.102.178 any -> 10.10.10.10 any (
    msg:"Traffic detected from 220.123.102.178 to 10.10.10.10";
    sid:2000009;
    rev:1;
)
```

*Explanation:*  
This rule simply alerts when any traffic originates from the IP address 220.123.102.178 and is directed to 10.10.10.10.

---

# Part 3: Live Capture Snort 3 Rule Creation

### **3-1: Alert When Visiting http://httpforever.com/**

**Rule 3-1:**

```snort
alert tcp $EXTERNAL_NET any -> $HOME_NET 80 (
    msg:"HTTP access to httpforever.com detected";
    flow:to_server,established;
    http_header;
    content:"Host|3A| httpforever.com";
    sid:3000001;
    rev:1;
)
```

*Explanation:*  
This rule inspects HTTP headers for a “Host:” field that contains “httpforever.com.” It ensures that you are not simply hard-coding the URL into the rule but are instead using HTTP protocol specifics to trigger the alert.

*Testing:*  
Run Snort in live mode with this rule loaded. Then, using a browser, navigate to http://httpforever.com/ and observe the console for the alert message. Take a screenshot of the alert alongside your browser window.

---

### **3-2: Additional Live-Capture Rules for High-Density Traffic**

**Rule 3-2A (Example: FTP Login Attempt in High-Density Environment):**

```snort
alert tcp any any -> $HOME_NET 21 (
    msg:"FTP login attempt detected in high-density environment";
    flow:to_server,established;
    content:"USER";
    sid:3000002;
    rev:1;
)
```

**Rule 3-2B (Example: Telnet Session Initiation):**

```snort
alert tcp any any -> $HOME_NET 23 (
    msg:"Telnet session initiated in high-density environment";
    flow:to_server,established;
    content:"Telnet";
    sid:3000003;
    rev:1;
)
```

*Explanation:*  
These sample rules are crafted based on observed traffic during your high-density capture session. One rule targets FTP login attempts while the other looks for Telnet sessions. In your lab report, include screenshots of the Snort console showing these alerts firing and a packet capture snippet (e.g., from Wireshark) that verifies the protocol details.

---

# Testing and Finalizing the Lab

### **Steps to Test Your Rules**

1. **Save and Organize Rules:**  
   Save each set of rules in files with appropriate names and extensions (e.g., `p1.rules`, `p2.rules`, and `p3.rules`).  
   • Part 1 rules for scenario-based tests  
   • Part 2 rules for forensic PCAP-based tests  
   • Part 3 rules for live-capture tests

2. **Run Snort Against PCAP Files:**  
   Use the following command structure for testing:
   
   ```bash
   snort -c /usr/local/etc/snort/snort.lua -R <your_rule_file.rules> -r <path_to_pcap_file.pcap>
   ```
   
   For example, to test the LOIC rules (Part 1):
   
   ```bash
   snort -c /usr/local/etc/snort/snort.lua -R p1.rules -r pcaps/LOIC_http_flood.pcap
   ```
   
   Review the console or log output for the alert messages you defined (e.g., “LOIC HTTP GET flood detected - alert”).

3. **Run Live Capture Tests (Part 3):**  
   Open a new terminal window and run:
   
   ```bash
   snort -c /usr/local/etc/snort/snort.lua -R p3.rules
   ```
   
   Then generate the traffic (e.g., visit http://httpforever.com/) and observe the alerts. Capture screenshots as required.

---
